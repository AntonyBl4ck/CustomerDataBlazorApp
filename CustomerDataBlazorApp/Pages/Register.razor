@page "/register"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h1 class="text-center">Registration</h1>

<EditForm Model="@newCustomer" OnValidSubmit="HandleRegistration" class="registration-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText id="firstName" @bind-Value="newCustomer.FirstName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="surname">Last Name:</label>
        <InputText id="surname" @bind-Value="newCustomer.Surname" class="form-control" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="newCustomer.Email" type="email" class="form-control" />
    </div>

    <button type="submit" class="submit-button" disabled="@isRegistrationSuccessful">Register</button>

    @if (!string.IsNullOrEmpty(registrationMessage))
    {
        <p class="registration-message @(isRegistrationSuccessful ? "success-message" : "error-message")">@registrationMessage</p>
    }
</EditForm>

<style>
    .registration-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
    }

        .form-group label {
            margin-bottom: 5px;
            font-weight: bold;
        }

    .form-control {
        padding: 8px;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .submit-button {
        width: 100%;
        padding: 10px;
        background: linear-gradient(90deg, #4CAF50, #1E7F36);
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 1.1rem;
        cursor: pointer;
        text-align: center;
    }

        .submit-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

    .registration-message {
        margin-top: 20px;
        font-weight: bold;
    }

    .success-message {
        color: #4CAF50;
    }

    .error-message {
        color: red;
    }
</style>

@code {
    private Customer newCustomer = new Customer();
    private string registrationMessage;
    private bool isRegistrationSuccessful;

    private async Task HandleRegistration()
    {
        var response = await HttpClient.PostAsJsonAsync("api/customers/register", newCustomer);

        if (response.IsSuccessStatusCode)
        {
            registrationMessage = "Registration was successful! You will be redirected to the login page in 5 seconds.";
            isRegistrationSuccessful = true; 
            StateHasChanged(); 

            await Task.Delay(5000);
            NavigationManager.NavigateTo("/login");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            registrationMessage = "A user with this email already exists.";
            isRegistrationSuccessful = false;
            StateHasChanged();
        }
        else
        {
            registrationMessage = "An error occurred during registration. Please try again.";
            isRegistrationSuccessful = false;
            StateHasChanged();
        }
    }
}
